# $Id: Exception.pm 79 2010-06-07 13:21:28Z oetiker $
package nq::Exception;
use 5.12.0;

=head1 NAME

nq::Exception - a mouse based exception class

=head1 SYNOPSIS

 use nq::Exception qw(error);
 use Try::Tiny;
 
 try {
     die error(22,'Bad Error');
 }
 catch {
     print "Code: '.$_->code()." Message: ".$_->message()."\n"
     print "$_\n"; #stringified error
 }
 
=head1 DESCRIPTION

An error object to be used in nq code.

=over

=cut


use Mouse;

use Mouse::Exporter;
Mouse::Exporter->setup_import_methods(
    as_is => [ 'error' ]
);

use overload ('""' => 'stringify');

has 'code' => (is => 'ro', isa => 'Int');
has 'message' => (is => 'ro', isa => 'Str');

=item B<error>(I<code>,I<message>)

Create an nq::Exception object, setting code and message properties in the process.

=cut

sub error {
    my $code = shift;
    my $message = shift;
    return (__PACKAGE__->new(code=>$code,message=>$message));
}

=item B<stringify>

error stringification handler

=cut

sub stringify {
    my $self = shift;
    return "ERROR ".$self->code().": ".$self->message();
}

no Mouse;
__PACKAGE__->meta->make_immutable();

1;
__END__

=back

=head1 COPYRIGHT

Copyright (c) 2010 by OETIKER+PARTNER AG. All rights reserved.

=head1 AUTHOR

S<Tobias Oetiker E<lt>tobi@oetiker.chE<gt>>

=head1 HISTORY

 2010-05-11 to 1.0 first version

=cut

# Emacs Configuration
#
# Local Variables:
# mode: cperl
# eval: (cperl-set-style "PerlStyle")
# mode: flyspell
# mode: flyspell-prog
# End:
#
# vi: sw=4 et

